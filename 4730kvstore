#!/usr/bin/env python3

import argparse, socket, time, json, select
from StateMachine import State, Leader

BROADCAST = "FFFF"
RECV_WAIT = 0.1
SEND_WAIT = 0.01

# represents a single replica machine in a RAFT protocolo cluster
class Replica:
    def __init__(self, port, id, others):
        self.port = port
        self.socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.socket.bind(('localhost', 0))
        
        self.state = State(id, others)

        print("Replica %s starting up" % id, flush=True)
        hello = { "src": self.state.id, "dst": self.state.leader_id, "leader": self.state.leader_id, "type": "hello" }
        self.send(hello)
        print("Sent hello message: %s" % hello, flush=True)

        # leader gets a put
        # leader sends to each replica, replica adds to log as uncommitted and sends OK to leader
        # when quorum, send commit OK 
        # pop from log and commit, add to committed

        # if follower rx an AppendEntry w/ higher commit or log index, send fail and leader will respond w/ one lower

    # reads bytes from the socket as json and decodes into a python dictionary
    def recv(self) -> dict:
        ready = select.select([self.socket], [], [], RECV_WAIT)[0]
        if ready:
            buffer = ''
            while '}' not in buffer:
                encoded_data, addr = self.socket.recvfrom(65535)
                buffer += encoded_data.decode('utf-8')
            return json.loads(buffer)

    # encodes a python dictionary as json and writes to the socket as bytes
    def send(self, message: dict) -> None:
        ready = select.select([], [self.socket], [], SEND_WAIT)[1]
        if ready:
             self.socket.sendto(json.dumps(message).encode('utf-8'), ('localhost', self.port))

    # spins up this replica by continuously receiving messages, mutating the state, sending messages, and tracking hearbeats
    def run(self) -> None:
        self.state.last_heartbeat = time.time()
        while True:
            if(self.state.role == Leader):
                Leader.checkAckTimeouts(self.state)
            
            if (time.time() - self.state.last_heartbeat >= self.state.timeout_sec):
                res = self.state.role.execOnTimeout(self.state)
                for m in res:
                    self.send(m)
                    
            
            msg = self.recv()
            if msg:
                res = self.state.role.handle(self.state, msg)
                for m in res:
                    self.send(m)
            
if __name__ == "__main__":
    parser = argparse.ArgumentParser(description='run a key-value store')
    parser.add_argument('port', type=int, help="Port number to communicate")
    parser.add_argument('id', type=str, help="ID of this replica")
    parser.add_argument('others', metavar='others', type=str, nargs='+', help="IDs of other replicas")
    args = parser.parse_args()
    replica = Replica(args.port, args.id, args.others)
    replica.run()
